datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Pobierane ze zmiennych Å›rodowiskowych
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  bio       String? // Opcjonalne pole
  avatar    String? // Opcjonalne pole
  role      UserRole  @default(CUSTOMER) // "CUSTOMER", "OWNER" lub "ADMIN"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  firms     Firm[]    @relation("UserFirms")
  bookings  Booking[] @relation("UserBookings")
  reviews   Review[]  @relation("UserReviews")
}

model Firm {
  id           Int        @id @default(autoincrement())
  name         String
  description  String
  location     String
  openingHours String
  ownerId      Int
  owner        User       @relation("UserFirms", fields: [ownerId], references: [id])
  menuItems    MenuItem[] @relation("FirmMenuItems")
  bookings     Booking[]  @relation("FirmBookings")
  reviews      Review[]   @relation("FirmReviews")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model MenuItem {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  price       Float
  category    String
  firmId      Int
  firm        Firm   @relation("FirmMenuItems", fields: [firmId], references: [id])
}

model Booking {
  id             Int           @id @default(autoincrement())
  bookingTime    DateTime
  numberOfPeople Int
  status         BookingStatus @default(PENDING) // "PENDING", "CONFIRMED" lub "CANCELLED"
  customerId     Int
  customer       User          @relation("UserBookings", fields: [customerId], references: [id])
  firmId         Int
  firm           Firm          @relation("FirmBookings", fields: [firmId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String
  customerId Int
  customer   User     @relation("UserReviews", fields: [customerId], references: [id])
  firmId     Int
  firm       Firm     @relation("FirmReviews", fields: [firmId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum UserRole {
  CUSTOMER
  OWNER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
